/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.7).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package pl.edu.agh.tk.api;

import pl.edu.agh.tk.model.Error;
import pl.edu.agh.tk.model.InlineResponse200;
import pl.edu.agh.tk.model.InlineResponse201;
import pl.edu.agh.tk.model.JobParams;
import pl.edu.agh.tk.model.JobResults;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-04-29T03:31:06.896Z[GMT]")
@Api(value = "job", description = "the job API")
public interface JobApi {

    @ApiOperation(value = "", nickname = "jobJobIdDelete", notes = "Cancel running job", tags={ "job", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Cancelled"),
        @ApiResponse(code = 404, message = "No such job"),
        @ApiResponse(code = 405, message = "Job is not running. Either finished or was cancelled.") })
    @RequestMapping(value = "/job/{jobId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> jobJobIdDelete(@ApiParam(value = "",required=true) @PathVariable("jobId") Integer jobId);


    @ApiOperation(value = "", nickname = "jobJobIdResultsGet", notes = "Job results", response = JobResults.class, tags={ "job", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Results", response = JobResults.class),
        @ApiResponse(code = 400, message = "Error while calculating doses", response = Error.class),
        @ApiResponse(code = 404, message = "No results for job {jobId}") })
    @RequestMapping(value = "/job/{jobId}/results",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<JobResults> jobJobIdResultsGet(@ApiParam(value = "",required=true) @PathVariable("jobId") Integer jobId);


    @ApiOperation(value = "", nickname = "jobJobIdStatusGet", notes = "Job status", response = InlineResponse200.class, tags={ "job", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Status", response = InlineResponse200.class),
        @ApiResponse(code = 404, message = "No such job") })
    @RequestMapping(value = "/job/{jobId}/status",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse200> jobJobIdStatusGet(@ApiParam(value = "",required=true) @PathVariable("jobId") Integer jobId);


    @ApiOperation(value = "", nickname = "jobPost", notes = "Schedule job", response = InlineResponse201.class, tags={ "job", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = InlineResponse201.class),
        @ApiResponse(code = 422, message = "Invalid arguments") })
    @RequestMapping(value = "/job",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<InlineResponse201> jobPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody JobParams body);

}
